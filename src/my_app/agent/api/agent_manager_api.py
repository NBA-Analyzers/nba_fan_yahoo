from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from services.agent_manager import AgentManager
from typing import Optional


class ChatRequest(BaseModel):
    # User session generated by frontend when starting a new chat
    # (will be saved to DB to allow the user to continue old conversations)
    session_id: str
    user_message: str
    league_id: Optional[str] = None
    vector_store_id: Optional[str] = None


class ChatSession(BaseModel):
    session_id: str
    previous_openai_response_id: str


class AssistantResponse(BaseModel):
    assistant_response_text: str
    response_id: str


agent_router = APIRouter()

# Global instance that will be set during startup
_agent_api_instance = None


def set_agent_api_instance(agent_api: "AgentAPI"):
    global _agent_api_instance
    _agent_api_instance = agent_api


def get_agent_api_instance() -> "AgentAPI":
    if _agent_api_instance is None:
        raise HTTPException(status_code=500, detail="AgentAPI not initialized")
    return _agent_api_instance


class AgentAPI:
    def __init__(self, agent_manager: AgentManager):
        # TODO: save the chat sessions in DB and initialize this list upon app startup
        self.currently_open_chat_sessions = []
        self.agent_manager = agent_manager
        self.vector_store_id = (
            "vs_68d28df1db1081919589f7dcbb4df3c3"  # Default vector store ID
        )

    def get_vector_store_id(self, league_id: Optional[str] = None) -> str:
        """
        Get OpenAI vector store ID.
        Priority:
        1. League-specific vector store (if league_id provided)
        2. Fetch from DB
        3. Fall back to default
        """
        # If league_id provided, try to get league-specific vector store
        if league_id and self.vector_store_manager:
            vector_store_id = f"league_{league_id}"
            openai_vs_id = self.vector_store_manager.get_vector_store_id(
                vector_store_id
            )
            if openai_vs_id:
                print(f"ðŸ“š Using league vector store: {openai_vs_id}")
                return openai_vs_id

        # Try to fetch from DB (for rules, box score, etc.)
        if self.file_service:
            try:
                # Try common vector stores
                for vs_id in ["rules", "box_score"]:
                    vector_meta = self.file_service.get_vector_store(vs_id)
                    if vector_meta:
                        print(
                            f"ðŸ“š Using {vs_id} vector store: {vector_meta.openai_vector_id}"
                        )
                        return vector_meta.openai_vector_id
            except Exception:
                pass

        # Fall back to default
        print(f"ðŸ“š Using default vector store: {self.default_vector_store_id}")
        return self.default_vector_store_id


@agent_router.post("/chat")
async def chat_with_openai(request: ChatRequest):
    """
    Chat endpoint that supports league-specific context.
    If league_id is provided, uses league-specific vector store.
    """
    agent_api = get_agent_api_instance()

    # Get appropriate vector store ID
    vector_store_id = agent_api.get_vector_store_id(request.league_id)

    # Start new chat
    if request.session_id not in [
        session.session_id for session in agent_api.currently_open_chat_sessions
    ]:
        assistant_response = agent_api.agent_manager.start_chat(
            previous_response_id=None,
            new_user_message=request.user_message,
            openai_vector_store_id=vector_store_id,
        )
        new_chat_session = ChatSession(
            session_id=request.session_id,
            previous_openai_response_id=assistant_response.id,
        )
        agent_api.currently_open_chat_sessions.append(new_chat_session)
    else:
        for chat_session in agent_api.currently_open_chat_sessions:
            if chat_session.session_id == request.session_id:
                assistant_response = agent_api.agent_manager.start_chat(
                    previous_response_id=chat_session.previous_openai_response_id,
                    new_user_message=request.user_message,
                    openai_vector_store_id=vector_store_id,
                )
                chat_session.previous_openai_response_id = assistant_response.id
                break

    return assistant_response.output_text
