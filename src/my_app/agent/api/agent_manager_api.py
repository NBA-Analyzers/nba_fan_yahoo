from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from services.agent_manager import AgentManager
from typing import Optional


class ChatRequest(BaseModel):
    # User session generated by frontend when starting a new chat
    # (will be saved to DB to allow the user to continue old conversations)
    session_id: str
    user_message: str
    league_id: Optional[str] = None
    vector_store_id: Optional[str] = None


class ChatSession(BaseModel):
    session_id: str
    previous_openai_response_id: str


class AssistantResponse(BaseModel):
    assistant_response_text: str
    response_id: str


agent_router = APIRouter()

# Global instance that will be set during startup
_agent_api_instance = None


def set_agent_api_instance(agent_api: "AgentAPI"):
    global _agent_api_instance
    _agent_api_instance = agent_api


def get_agent_api_instance() -> "AgentAPI":
    if _agent_api_instance is None:
        raise HTTPException(status_code=500, detail="AgentAPI not initialized")
    return _agent_api_instance


class AgentAPI:
    def __init__(self, agent_manager: AgentManager):
        # TODO: save the chat sessions in DB and initialize this list upon app startup
        self.currently_open_chat_sessions = []
        self.agent_manager = agent_manager
        self.vector_store_id = (
            "vs_68d28df1db1081919589f7dcbb4df3c3"  # Default vector store ID
        )


@agent_router.post("/chat")
async def chat_with_openai(request: ChatRequest):
    agent_api = get_agent_api_instance()

    # Start new chat
    if request.session_id not in [
        session.session_id for session in agent_api.currently_open_chat_sessions
    ]:
        assistant_response = agent_api.agent_manager.start_chat(
            previous_response_id=None,
            new_user_message=request.user_message,
            openai_vector_store_id=agent_api.vector_store_id,
        )
        new_chat_session = ChatSession(
            session_id=request.session_id,
            previous_openai_response_id=assistant_response.id,
        )
        agent_api.currently_open_chat_sessions.append(new_chat_session)
    else:
        for chat_session in agent_api.currently_open_chat_sessions:
            if chat_session.session_id == request.session_id:
                assistant_response = agent_api.agent_manager.start_chat(
                    previous_response_id=chat_session.previous_openai_response_id,
                    new_user_message=request.user_message,
                    openai_vector_store_id=agent_api.vector_store_id,
                )
                chat_session.previous_openai_response_id = assistant_response.id
                break
    return assistant_response.output_text
